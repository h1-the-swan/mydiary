/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * mydiary
 * OpenAPI spec version: 0.1.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export type ReadRecipesListParams = {
offset?: number;
limit?: number;
};

export type ReadDogsListParams = {
offset?: number;
limit?: number;
};

export type ReadPerformSongsListParams = {
offset?: number;
limit?: number;
};

export type GetNextcloudImageNextcloudThumbnailImgGetParams = {
url: string;
};

export type JoplinUpdateNoteParams = {
tz?: string;
};

export type DayInitMarkdownParams = {
tz?: string;
};

export type JoplinInitNoteParams = {
tz?: string;
post_sync?: unknown;
};

export type ReadSpotifyHistoryParams = {
offset?: number;
limit?: number;
};

export type ReadPocketArticlesParams = {
offset?: number;
limit?: number;
status?: number[] | null;
/**
 * Tag names (comma separated
 */
tags?: string | null;
dateMin?: string | null;
dateMax?: string | null;
/**
 * Year added (ignored if dateRange is specified)
 */
year?: number | null;
};

export type ReadTagsParams = {
offset?: number;
limit?: number;
is_pocket_tag?: boolean | null;
};

export type ReadGCalEventsParams = {
offset?: number;
limit?: number;
};

export type RefreshGCalTokenParams = {
code: string;
};

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type TagReadNumPocketArticles = number | null;

export interface TagRead {
  name: string;
  is_pocket_tag?: boolean;
  num_pocket_articles?: TagReadNumPocketArticles;
}

export type SpotifyTrackHistoryReadContextType = number | null;

export type SpotifyTrackHistoryReadContextName = string | null;

export type SpotifyTrackHistoryReadContextUri = string | null;

export type SpotifyTrackHistoryReadId = number | null;

export interface SpotifyTrackBase {
  spotify_id: string;
  name: string;
  artist_name: string;
  uri: string;
}

export interface SpotifyTrackHistoryRead {
  id?: SpotifyTrackHistoryReadId;
  played_at: string;
  context_uri?: SpotifyTrackHistoryReadContextUri;
  context_name?: SpotifyTrackHistoryReadContextName;
  context_type?: SpotifyTrackHistoryReadContextType;
  spotify_id: string;
  id_: number;
  track: SpotifyTrackBase;
}

export type RecipeReadNotes = string | null;

export interface RecipeRead {
  name: string;
  upvotes?: number;
  notes?: RecipeReadNotes;
  id: number;
}

export type RecipeCreateNotes = string | null;

export interface RecipeCreate {
  name: string;
  upvotes?: number;
  notes?: RecipeCreateNotes;
}

export type PocketStatusEnum = typeof PocketStatusEnum[keyof typeof PocketStatusEnum];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PocketStatusEnum = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export type PocketArticleUpdatePocketTags = string[] | null;

export type PocketArticleUpdateTopImageUrl = string | null;

export type PocketArticleUpdateExcerpt = string | null;

export type PocketArticleUpdateWordCount = number | null;

export type PocketArticleUpdateListenDurationEstimate = number | null;

export type PocketArticleUpdateTimeFavorited = string | null;

export type PocketArticleUpdateTimeRead = string | null;

export type PocketArticleUpdateTimeUpdated = string | null;

export type PocketArticleUpdateTimeAdded = string | null;

export type PocketArticleUpdateStatus = PocketStatusEnum | null;

export type PocketArticleUpdateFavorite = boolean | null;

export type PocketArticleUpdateUrl = string | null;

export type PocketArticleUpdateResolvedTitle = string | null;

export type PocketArticleUpdateGivenTitle = string | null;

export interface PocketArticleUpdate {
  given_title?: PocketArticleUpdateGivenTitle;
  resolved_title?: PocketArticleUpdateResolvedTitle;
  url?: PocketArticleUpdateUrl;
  favorite?: PocketArticleUpdateFavorite;
  status?: PocketArticleUpdateStatus;
  time_added?: PocketArticleUpdateTimeAdded;
  time_updated?: PocketArticleUpdateTimeUpdated;
  time_read?: PocketArticleUpdateTimeRead;
  time_favorited?: PocketArticleUpdateTimeFavorited;
  listen_duration_estimate?: PocketArticleUpdateListenDurationEstimate;
  word_count?: PocketArticleUpdateWordCount;
  excerpt?: PocketArticleUpdateExcerpt;
  top_image_url?: PocketArticleUpdateTopImageUrl;
  pocket_tags?: PocketArticleUpdatePocketTags;
}

export type PocketArticleReadTopImageUrl = string | null;

export type PocketArticleReadExcerpt = string | null;

export type PocketArticleReadWordCount = number | null;

export type PocketArticleReadListenDurationEstimate = number | null;

export type PocketArticleReadTimeFavorited = string | null;

export type PocketArticleReadTimeRead = string | null;

export type PocketArticleReadTimeUpdated = string | null;

export type PocketArticleReadTimeAdded = string | null;

export interface PocketArticleRead {
  given_title: string;
  resolved_title: string;
  url: string;
  favorite: boolean;
  status: PocketStatusEnum;
  time_added?: PocketArticleReadTimeAdded;
  time_updated?: PocketArticleReadTimeUpdated;
  time_read?: PocketArticleReadTimeRead;
  time_favorited?: PocketArticleReadTimeFavorited;
  listen_duration_estimate?: PocketArticleReadListenDurationEstimate;
  word_count?: PocketArticleReadWordCount;
  excerpt?: PocketArticleReadExcerpt;
  top_image_url?: PocketArticleReadTopImageUrl;
  tags?: TagRead[];
}

export type PerformSongUpdateLearnedDt = string | null;

export type PerformSongUpdateLyrics = string | null;

export type PerformSongUpdateCapo = number | null;

export type PerformSongUpdateKey = string | null;

export type PerformSongUpdateCreatedAt = string | null;

export type PerformSongUpdatePerformUrl = string | null;

export type PerformSongUpdateNotes = string | null;

export type PerformSongUpdateSpotifyId = string | null;

export type PerformSongUpdateLearned = boolean | null;

export type PerformSongUpdateArtistName = string | null;

export type PerformSongUpdateName = string | null;

export interface PerformSongUpdate {
  name?: PerformSongUpdateName;
  artist_name?: PerformSongUpdateArtistName;
  learned?: PerformSongUpdateLearned;
  spotify_id?: PerformSongUpdateSpotifyId;
  notes?: PerformSongUpdateNotes;
  perform_url?: PerformSongUpdatePerformUrl;
  created_at?: PerformSongUpdateCreatedAt;
  key?: PerformSongUpdateKey;
  capo?: PerformSongUpdateCapo;
  lyrics?: PerformSongUpdateLyrics;
  learned_dt?: PerformSongUpdateLearnedDt;
}

export type PerformSongReadLearnedDt = string | null;

export type PerformSongReadLyrics = string | null;

export type PerformSongReadCapo = number | null;

export type PerformSongReadKey = string | null;

export type PerformSongReadCreatedAt = string | null;

export type PerformSongReadPerformUrl = string | null;

export type PerformSongReadNotes = string | null;

export type PerformSongReadSpotifyId = string | null;

export type PerformSongReadArtistName = string | null;

export interface PerformSongRead {
  name: string;
  artist_name?: PerformSongReadArtistName;
  learned?: boolean;
  spotify_id?: PerformSongReadSpotifyId;
  notes?: PerformSongReadNotes;
  perform_url?: PerformSongReadPerformUrl;
  created_at?: PerformSongReadCreatedAt;
  key?: PerformSongReadKey;
  capo?: PerformSongReadCapo;
  lyrics?: PerformSongReadLyrics;
  learned_dt?: PerformSongReadLearnedDt;
  id: number;
}

export type PerformSongCreateLearnedDt = string | null;

export type PerformSongCreateLyrics = string | null;

export type PerformSongCreateCapo = number | null;

export type PerformSongCreateKey = string | null;

export type PerformSongCreateCreatedAt = string | null;

export type PerformSongCreatePerformUrl = string | null;

export type PerformSongCreateNotes = string | null;

export type PerformSongCreateSpotifyId = string | null;

export type PerformSongCreateArtistName = string | null;

export interface PerformSongCreate {
  name: string;
  artist_name?: PerformSongCreateArtistName;
  learned?: boolean;
  spotify_id?: PerformSongCreateSpotifyId;
  notes?: PerformSongCreateNotes;
  perform_url?: PerformSongCreatePerformUrl;
  created_at?: PerformSongCreateCreatedAt;
  key?: PerformSongCreateKey;
  capo?: PerformSongCreateCapo;
  lyrics?: PerformSongCreateLyrics;
  learned_dt?: PerformSongCreateLearnedDt;
}

export type MyDiaryImageReadJoplinResourceId = string | null;

export type MyDiaryImageReadDescription = string | null;

export type MyDiaryImageReadNextcloudPath = string | null;

export type MyDiaryImageReadFilepath = string | null;

export type MyDiaryImageReadName = string | null;

export interface MyDiaryImageRead {
  hash: string;
  name?: MyDiaryImageReadName;
  filepath?: MyDiaryImageReadFilepath;
  nextcloud_path?: MyDiaryImageReadNextcloudPath;
  description?: MyDiaryImageReadDescription;
  thumbnail_size: number;
  joplin_resource_id?: MyDiaryImageReadJoplinResourceId;
  created_at: string;
  id: number;
}

export interface JoplinNote {
  id: string;
  parent_id: string;
  title: string;
  body: string;
  created_time: string;
  updated_time: string;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface GooglePhotosThumbnail {
  baseUrl: string;
  width: number;
  height: number;
}

export type GoogleCalendarEventReadDescription = string | null;

export type GoogleCalendarEventReadLocation = string | null;

export interface GoogleCalendarEventRead {
  id?: string;
  summary?: string;
  location?: GoogleCalendarEventReadLocation;
  description?: GoogleCalendarEventReadDescription;
  start?: string;
  end?: string;
  start_timezone?: string;
  end_timezone?: string;
}

export type DogUpdateNotes = string | null;

export type DogUpdateEstimatedBday = string | null;

export type DogUpdateOwners = string | null;

export type DogUpdateWhenMet = string | null;

export type DogUpdateHowMet = string | null;

export type DogUpdateName = string | null;

export interface DogUpdate {
  name?: DogUpdateName;
  how_met?: DogUpdateHowMet;
  when_met?: DogUpdateWhenMet;
  owners?: DogUpdateOwners;
  estimated_bday?: DogUpdateEstimatedBday;
  notes?: DogUpdateNotes;
}

export type DogReadNotes = string | null;

export type DogReadEstimatedBday = string | null;

export type DogReadOwners = string | null;

export type DogReadWhenMet = string | null;

export type DogReadHowMet = string | null;

export interface DogRead {
  name: string;
  how_met?: DogReadHowMet;
  when_met?: DogReadWhenMet;
  owners?: DogReadOwners;
  estimated_bday?: DogReadEstimatedBday;
  notes?: DogReadNotes;
  id: number;
}

export type DogCreateNotes = string | null;

export type DogCreateEstimatedBday = string | null;

export type DogCreateOwners = string | null;

export type DogCreateWhenMet = string | null;

export type DogCreateHowMet = string | null;

export interface DogCreate {
  name: string;
  how_met?: DogCreateHowMet;
  when_met?: DogCreateWhenMet;
  owners?: DogCreateOwners;
  estimated_bday?: DogCreateEstimatedBday;
  notes?: DogCreateNotes;
}





  /**
 * @summary Get Gcal Auth Url
 */
export const getGCalAuthUrl = <TData = AxiosResponse<string>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/gcal/get_auth_url`,options
    );
  }

/**
 * @summary Refresh Gcal Token
 */
export const refreshGCalToken = <TData = AxiosResponse<unknown>>(
    params: RefreshGCalTokenParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/gcal/refresh_token`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Check Gcal Auth
 */
export const checkGCalAuth = <TData = AxiosResponse<unknown>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/gcal/check_auth`,undefined,options
    );
  }

/**
 * @summary Read Gcal Events
 */
export const readGCalEvents = <TData = AxiosResponse<GoogleCalendarEventRead[]>>(
    params?: ReadGCalEventsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/gcal/events`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Read Tags
 */
export const readTags = <TData = AxiosResponse<TagRead[]>>(
    params?: ReadTagsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/tags`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Count Pocket Articles
 */
export const countPocketArticles = <TData = AxiosResponse<number>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/pocket/articles/count`,options
    );
  }

/**
 * @summary Read Pocket Articles
 */
export const readPocketArticles = <TData = AxiosResponse<PocketArticleRead[]>>(
    params?: ReadPocketArticlesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/pocket/articles`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Update Pocket Article
 */
export const updatePocketArticle = <TData = AxiosResponse<PocketArticleRead>>(
    articleId: number,
    pocketArticleUpdate: PocketArticleUpdate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/pocket/articles/${articleId}`,
      pocketArticleUpdate,options
    );
  }

/**
 * @summary Read Spotify History
 */
export const readSpotifyHistory = <TData = AxiosResponse<SpotifyTrackHistoryRead[]>>(
    params?: ReadSpotifyHistoryParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/spotify/history`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Spotify History Count
 */
export const spotifyHistoryCount = <TData = AxiosResponse<number>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/spotify/history/count`,options
    );
  }

/**
 * @summary Get Spotify Image Url
 */
export const getSpotifyImageUrl = <TData = AxiosResponse<string>>(
    trackId: string | null, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/spotify/album_image_url/${trackId}`,options
    );
  }

/**
 * @summary Spotify Save Recent Tracks To Database
 */
export const spotifySaveRecentTracksToDatabase = <TData = AxiosResponse<number>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/spotify/save_recent_tracks_to_database`,undefined,options
    );
  }

/**
 * @summary Joplin Sync
 */
export const joplinSync = <TData = AxiosResponse<unknown>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/joplin/sync`,undefined,options
    );
  }

/**
 * @summary Joplin Get Note Id
 */
export const joplinGetNoteId = <TData = AxiosResponse<string>>(
    dt: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/joplin/get_note_id/${dt}`,options
    );
  }

/**
 * @summary Joplin Init Note
 */
export const joplinInitNote = <TData = AxiosResponse<unknown>>(
    dt: string,
    params?: JoplinInitNoteParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/joplin/init_note/${dt}`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Day Init Markdown
 */
export const dayInitMarkdown = <TData = AxiosResponse<unknown>>(
    dt: string,
    params?: DayInitMarkdownParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/day_init_markdown/${dt}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Joplin Get Note
 */
export const joplinGetNote = <TData = AxiosResponse<JoplinNote>>(
    noteId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/joplin/get_note/${noteId}`,options
    );
  }

/**
 * @summary Joplin Get Note Images
 */
export const joplinNoteImages = <TData = AxiosResponse<MyDiaryImageRead[]>>(
    noteId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/joplin/get_note_images/${noteId}`,options
    );
  }

/**
 * @summary Joplin Update Note
 */
export const joplinUpdateNote = <TData = AxiosResponse<unknown>>(
    dt: string,
    params?: JoplinUpdateNoteParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/joplin/update_note/${dt}`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Google Photos Thumbnails Url
 */
export const googlePhotosThumbnailUrls = <TData = AxiosResponse<GooglePhotosThumbnail[]>>(
    dt: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/googlephotos/thumbnails/${dt}`,options
    );
  }

/**
 * @summary Google Photos Add To Joplin
 */
export const googlePhotosAddToJoplin = <TData = AxiosResponse<unknown>>(
    noteId: string,
    googlePhotosThumbnail: GooglePhotosThumbnail[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/googlephotos/add_to_joplin/${noteId}`,
      googlePhotosThumbnail,options
    );
  }

/**
 * @summary Nextcloud Photos Thumbnails Url
 */
export const nextcloudPhotosThumbnailUrls = <TData = AxiosResponse<string[]>>(
    dt: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/nextcloud/thumbnails/${dt}`,options
    );
  }

/**
 * @summary Get Nextcloud Image
 */
export const getNextcloudImageNextcloudThumbnailImgGet = <TData = AxiosResponse<unknown>>(
    params: GetNextcloudImageNextcloudThumbnailImgGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/nextcloud/thumbnail_img`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Nextcloud Photos Add To Joplin
 */
export const nextcloudPhotosAddToJoplin = <TData = AxiosResponse<unknown>>(
    noteId: string,
    nextcloudPhotosAddToJoplinBody: string[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/nextcloud/add_to_joplin/${noteId}`,
      nextcloudPhotosAddToJoplinBody,options
    );
  }

/**
 * @summary Create Perform Song
 */
export const createPerformSong = <TData = AxiosResponse<PerformSongRead>>(
    performSongCreate: PerformSongCreate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/performsongs/`,
      performSongCreate,options
    );
  }

/**
 * @summary Read Perform Songs
 */
export const readPerformSongsList = <TData = AxiosResponse<PerformSongRead[]>>(
    params?: ReadPerformSongsListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/performsongs/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Perform Song  Count
 */
export const performSongCount = <TData = AxiosResponse<number>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/performsongs/count`,options
    );
  }

/**
 * @summary Read Perform Song
 */
export const readPerformSong = <TData = AxiosResponse<PerformSongRead>>(
    performSongId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/performsongs/${performSongId}`,options
    );
  }

/**
 * @summary Update Perform Song
 */
export const updatePerformSong = <TData = AxiosResponse<PerformSongRead>>(
    performSongId: number,
    performSongUpdate: PerformSongUpdate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/performsongs/${performSongId}`,
      performSongUpdate,options
    );
  }

/**
 * @summary Delete Perform Song
 */
export const deletePerformSong = <TData = AxiosResponse<unknown>>(
    performSongId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/performsongs/${performSongId}`,options
    );
  }

/**
 * @summary Create Dog
 */
export const createDog = <TData = AxiosResponse<DogRead>>(
    dogCreate: DogCreate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/dogs/`,
      dogCreate,options
    );
  }

/**
 * @summary Read Dogs
 */
export const readDogsList = <TData = AxiosResponse<DogRead[]>>(
    params?: ReadDogsListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/dogs/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Read Dog
 */
export const readDog = <TData = AxiosResponse<DogRead>>(
    dogId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/dogs/${dogId}`,options
    );
  }

/**
 * @summary Update Dog
 */
export const updateDog = <TData = AxiosResponse<DogRead>>(
    dogId: number,
    dogUpdate: DogUpdate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/dogs/${dogId}`,
      dogUpdate,options
    );
  }

/**
 * @summary Delete Dog
 */
export const deleteDog = <TData = AxiosResponse<unknown>>(
    dogId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/dogs/${dogId}`,options
    );
  }

/**
 * @summary Create Recipe
 */
export const createRecipe = <TData = AxiosResponse<RecipeRead>>(
    recipeCreate: RecipeCreate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/recipes/`,
      recipeCreate,options
    );
  }

/**
 * @summary Read Recipes
 */
export const readRecipesList = <TData = AxiosResponse<RecipeRead>>(
    params?: ReadRecipesListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/recipes/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Send Api Json
 */
export const sendApiJsonGenerateOpenapiJsonGet = <TData = AxiosResponse<unknown>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/generate_openapi_json`,options
    );
  }

export type GetGCalAuthUrlResult = AxiosResponse<string>
export type RefreshGCalTokenResult = AxiosResponse<unknown>
export type CheckGCalAuthResult = AxiosResponse<unknown>
export type ReadGCalEventsResult = AxiosResponse<GoogleCalendarEventRead[]>
export type ReadTagsResult = AxiosResponse<TagRead[]>
export type CountPocketArticlesResult = AxiosResponse<number>
export type ReadPocketArticlesResult = AxiosResponse<PocketArticleRead[]>
export type UpdatePocketArticleResult = AxiosResponse<PocketArticleRead>
export type ReadSpotifyHistoryResult = AxiosResponse<SpotifyTrackHistoryRead[]>
export type SpotifyHistoryCountResult = AxiosResponse<number>
export type GetSpotifyImageUrlResult = AxiosResponse<string>
export type SpotifySaveRecentTracksToDatabaseResult = AxiosResponse<number>
export type JoplinSyncResult = AxiosResponse<unknown>
export type JoplinGetNoteIdResult = AxiosResponse<string>
export type JoplinInitNoteResult = AxiosResponse<unknown>
export type DayInitMarkdownResult = AxiosResponse<unknown>
export type JoplinGetNoteResult = AxiosResponse<JoplinNote>
export type JoplinNoteImagesResult = AxiosResponse<MyDiaryImageRead[]>
export type JoplinUpdateNoteResult = AxiosResponse<unknown>
export type GooglePhotosThumbnailUrlsResult = AxiosResponse<GooglePhotosThumbnail[]>
export type GooglePhotosAddToJoplinResult = AxiosResponse<unknown>
export type NextcloudPhotosThumbnailUrlsResult = AxiosResponse<string[]>
export type GetNextcloudImageNextcloudThumbnailImgGetResult = AxiosResponse<unknown>
export type NextcloudPhotosAddToJoplinResult = AxiosResponse<unknown>
export type CreatePerformSongResult = AxiosResponse<PerformSongRead>
export type ReadPerformSongsListResult = AxiosResponse<PerformSongRead[]>
export type PerformSongCountResult = AxiosResponse<number>
export type ReadPerformSongResult = AxiosResponse<PerformSongRead>
export type UpdatePerformSongResult = AxiosResponse<PerformSongRead>
export type DeletePerformSongResult = AxiosResponse<unknown>
export type CreateDogResult = AxiosResponse<DogRead>
export type ReadDogsListResult = AxiosResponse<DogRead[]>
export type ReadDogResult = AxiosResponse<DogRead>
export type UpdateDogResult = AxiosResponse<DogRead>
export type DeleteDogResult = AxiosResponse<unknown>
export type CreateRecipeResult = AxiosResponse<RecipeRead>
export type ReadRecipesListResult = AxiosResponse<RecipeRead>
export type SendApiJsonGenerateOpenapiJsonGetResult = AxiosResponse<unknown>
